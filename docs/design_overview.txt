Application design overview


                      +----------------------------+
                      |                            |
                      | AMQP for TCP connection    |
                      | state and data information |
                      |                            |
                      +---+--------------------+---+
                          |                    |
                          |                    |
                          |                    |
+-------------------------+---+             +--+------------------------------+
|                             |             |                                 |
|     Socket Layer            |             |  Worker Process                 |
|                             |             |                                 |
|     Outgoing & incoming     |             |  Handles all the logic in       |
|     TCP connections         |             |  response to the socket         |
|                             |             |  events. IRC protocol, server   |
|                             |             |  management, user states        |
+-----------------------------+             |                                 |
                                            +--+------------------------------+
                                               |
                                               |
                                            +--+------------------------+
                                            | Local database for worker |
                                            | state persistence between |
                                            | process restarts          |
                                            +---------------------------+


When the application starts, it re-creates another instance of itself with the
--worker argument (node src/server.js --worker), which then both processes
connect to the same AMQP server to start syncing events between themselves. A
socket layer instance may also be started individually by passing the --sockets
argument.

The RabbitMQ AMQP server has so far been tested for its fast and lightweight
usage, which combined with the 2 process application structure allows for a
versatile planning of running each process on individual systems, side by side,
in multiple containers, etc.

The socket layer is designed to be the most robust, minimal and simplistic part
of the application as to keep it running smoothly and not be impacted by any
bugs or most application updates. This should keep any active TCP connections
alive without data loss at any point.

The worker process handles the majority of the application logic, including all
IRC protocol and client logic. While crashes and performance degradation are
not welcome, this process has been designed to fail and completely restore
itself without any impact or interference to any connected IRC clients or active
TCP connections to IRC servers. This is managed by storing sensitive connection
state into a local sqlite database which is then restored on a worker process
restart.

With this design, most application upgrades can be made with zero downtime while
scaling to an increasing number of connections without overloading the system.
